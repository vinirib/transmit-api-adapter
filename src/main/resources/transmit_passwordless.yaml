openapi: 3.0.3
info:
  title: Passwordless
  description: Provide your users a passwordless authentication experience
  version: ''
servers:
  - url: https://api.userid.security
security: []
paths:
  /v1/auth/webauthn:
    get:
      operationId: startBindIdAuth
      summary: Login with WebAuthn Hosted
      description: Authenticate the user using secured biometrics. This endpoint should be called from the user's browser. It will redirect the User Agent to the login page and redirect back to Transmit upon successful authentication. Once Transmit verifies the authentication response, the User Agent will be redirected to the redirect_uri specified in the request. This URI will now include a code parameter in the query, which will be later exchanged for a token via the /token endpoint.
      parameters:
        - name: client_id
          required: true
          in: query
          description: Client ID of the application requesting authentication, retrieved from the Transmit Admin Portal
          example: DgsdfhSDsdfhtSDFXCCXBVMKPws345yscv2345XCZV
          schema:
            maxLength: 150
            type: string
        - name: redirect_uri
          required: true
          in: query
          example: https://www.example.com/login
          description: URI to redirect to upon completion of the IDP flow. This is the server GET endpoint used to call the token endpoint, and should accept "code" as a query parameter. This URI must also be configured as an allowed redirect URI in the Transmit Admin Portal
          schema:
            type: string
        - name: create_new_user
          required: false
          in: query
          example: false
          description: Indicates if a new user should be created if no user with associated email was found. If enabled, public signups must also be configured as allowed for the application.
          schema:
            default: true
            type: boolean
        - name: resource
          required: false
          in: query
          example: false
          description: Resource URI the login is attempting to access.
          schema:
            type: string
        - name: require_mfa
          required: false
          in: query
          example: true
          description: Require multi factor authentication for this authentication request.
          schema:
            default: false
            type: boolean
        - name: login_hint
          required: false
          in: query
          example: user@acme.com
          description: Hint for the user's login identifier.
          schema:
            type: string
        - name: custom_message
          required: false
          in: query
          example: Welcome to Acme
          description: Custom message to present on the consent screens, which provides authentication context details.
          schema:
            type: string
        - name: verifications
          required: false
          in: query
          description: List of data verifications to try and execute, specified as a space-delimited string. Email address will be verified by default, but this can be used to request a verified phone number (`phone`). If the data is already verified, it won't be verified again. The `acr` claim of the resulting ID token will indicate which data is verified.
          example: phone
          schema:
            type: string
        - name: ui_locales
          required: false
          in: query
          description: Preferred languages for the user interface, specified as a space-separated list of language tag values [RFC5646], ordered by preference.
          schema:
            type: string
        - name: claims
          required: false
          in: query
          example: '{"id_token":{"roles":null}}'
          description: Used to request additional claims in the ID token, such as roles and permissions. The structure is per the [OIDC Standard](https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter). See [OIDC APIs](https://developer.transmitsecurity.com/openapi/user/oidc/#operation/oidcAuthenticate!in=query&path=claims&t=request) for the supported claims.
          schema:
            default: ''
            type: string
        - name: state
          required: false
          in: query
          example: false
          description: An opaque string that is used to maintain state between the request and the callback. It will be added to the redirect URI as a query parameter, which should be validated by your server to protect against cross-site request forgery (CSRF) attacks
          schema:
            type: string
      responses:
        '302':
          description: Redirect with code
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRedirectUriHttpError'
  /v1/auth/apple:
    get:
      operationId: startAppleAuth
      summary: Login with Apple
      description: Authenticate the user using Sign in with Apple. This endpoint should be called from the user's browser. It will redirect the User Agent to the Apple IDP and redirect back to Transmit upon successful authentication. Once Transmit verifies the authentication response, the User Agent will be redirected to the redirect_uri specified in the request. This URI will now include a code parameter in the query, which will be later exchanged for a token via the /token endpoint.
      parameters:
        - name: client_id
          required: true
          in: query
          description: Client ID of the application requesting authentication, retrieved from the Transmit Admin Portal
          example: DgsdfhSDsdfhtSDFXCCXBVMKPws345yscv2345XCZV
          schema:
            maxLength: 150
            type: string
        - name: redirect_uri
          required: true
          in: query
          example: https://www.example.com/login
          description: URI to redirect to upon completion of the IDP flow. This is the server GET endpoint used to call the token endpoint, and should accept "code" as a query parameter. This URI must also be configured as an allowed redirect URI in the Transmit Admin Portal
          schema:
            type: string
        - name: create_new_user
          required: false
          in: query
          example: false
          description: Indicates if a new user should be created if no user with associated email was found. If enabled, public signups must also be configured as allowed for the application.
          schema:
            default: true
            type: boolean
        - name: resource
          required: false
          in: query
          example: false
          description: Resource URI the login is attempting to access.
          schema:
            type: string
        - name: require_mfa
          required: false
          in: query
          example: true
          description: Require multi factor authentication for this authentication request.
          schema:
            default: false
            type: boolean
        - name: claims
          required: false
          in: query
          example: '{"id_token":{"roles":null}}'
          description: Used to request additional claims in the ID token, such as roles and permissions. The structure is per the [OIDC Standard](https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter). See [OIDC APIs](https://developer.transmitsecurity.com/openapi/user/oidc/#operation/oidcAuthenticate!in=query&path=claims&t=request) for the supported claims.
          schema:
            default: ''
            type: string
        - name: state
          required: false
          in: query
          example: false
          description: An opaque string that is used to maintain state between the request and the callback. It will be added to the redirect URI as a query parameter, which should be validated by your server to protect against cross-site request forgery (CSRF) attacks
          schema:
            type: string
      responses:
        '302':
          description: Redirect with code
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRedirectUriHttpError'
  /v1/auth/facebook:
    get:
      operationId: startFacebookAuth
      summary: Login with Facebook
      description: Authenticate the user using Facebook Login. This endpoint should be called from the user's browser. It will redirect the User Agent to the Facebook IDP and redirect back to Transmit upon successful authentication. Once Transmit verifies the authentication response, the User Agent will be redirected to the redirect_uri specified in the request. This URI will now include a code parameter in the query, which will be later exchanged for a token via the /token endpoint.
      parameters:
        - name: client_id
          required: true
          in: query
          description: Client ID of the application requesting authentication, retrieved from the Transmit Admin Portal
          example: DgsdfhSDsdfhtSDFXCCXBVMKPws345yscv2345XCZV
          schema:
            maxLength: 150
            type: string
        - name: redirect_uri
          required: true
          in: query
          example: https://www.example.com/login
          description: URI to redirect to upon completion of the IDP flow. This is the server GET endpoint used to call the token endpoint, and should accept "code" as a query parameter. This URI must also be configured as an allowed redirect URI in the Transmit Admin Portal
          schema:
            type: string
        - name: create_new_user
          required: false
          in: query
          example: false
          description: Indicates if a new user should be created if no user with associated email was found. If enabled, public signups must also be configured as allowed for the application.
          schema:
            default: true
            type: boolean
        - name: resource
          required: false
          in: query
          example: false
          description: Resource URI the login is attempting to access.
          schema:
            type: string
        - name: require_mfa
          required: false
          in: query
          example: true
          description: Require multi factor authentication for this authentication request.
          schema:
            default: false
            type: boolean
        - name: claims
          required: false
          in: query
          example: '{"id_token":{"roles":null}}'
          description: Used to request additional claims in the ID token, such as roles and permissions. The structure is per the [OIDC Standard](https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter). See [OIDC APIs](https://developer.transmitsecurity.com/openapi/user/oidc/#operation/oidcAuthenticate!in=query&path=claims&t=request) for the supported claims.
          schema:
            default: ''
            type: string
        - name: state
          required: false
          in: query
          example: false
          description: An opaque string that is used to maintain state between the request and the callback. It will be added to the redirect URI as a query parameter, which should be validated by your server to protect against cross-site request forgery (CSRF) attacks
          schema:
            type: string
      responses:
        '302':
          description: Redirect with code
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRedirectUriHttpError'
  /v1/auth/google:
    get:
      operationId: startGoogleFlow
      summary: Login with Google
      description: Authenticate the user using Google Sign-In. This endpoint should be called from the user's browser. It will redirect the User Agent to the Google IDP and redirect back to Transmit upon successful authentication. Once Transmit verifies the authentication response, the User Agent will be redirected to the redirect_uri specified in the request. This URI will now include a code parameter in the query, which will be later exchanged for a token via the /token endpoint.
      parameters:
        - name: client_id
          required: true
          in: query
          description: Client ID of the application requesting authentication, retrieved from the Transmit Admin Portal
          example: DgsdfhSDsdfhtSDFXCCXBVMKPws345yscv2345XCZV
          schema:
            maxLength: 150
            type: string
        - name: redirect_uri
          required: true
          in: query
          example: https://www.example.com/login
          description: URI to redirect to upon completion of the IDP flow. This is the server GET endpoint used to call the token endpoint, and should accept "code" as a query parameter. This URI must also be configured as an allowed redirect URI in the Transmit Admin Portal
          schema:
            type: string
        - name: create_new_user
          required: false
          in: query
          example: false
          description: Indicates if a new user should be created if no user with associated email was found. If enabled, public signups must also be configured as allowed for the application.
          schema:
            default: true
            type: boolean
        - name: resource
          required: false
          in: query
          example: false
          description: Resource URI the login is attempting to access.
          schema:
            type: string
        - name: require_mfa
          required: false
          in: query
          example: true
          description: Require multi factor authentication for this authentication request.
          schema:
            default: false
            type: boolean
        - name: claims
          required: false
          in: query
          example: '{"id_token":{"roles":null}}'
          description: Used to request additional claims in the ID token, such as roles and permissions. The structure is per the [OIDC Standard](https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter). See [OIDC APIs](https://developer.transmitsecurity.com/openapi/user/oidc/#operation/oidcAuthenticate!in=query&path=claims&t=request) for the supported claims.
          schema:
            default: ''
            type: string
        - name: state
          required: false
          in: query
          example: false
          description: An opaque string that is used to maintain state between the request and the callback. It will be added to the redirect URI as a query parameter, which should be validated by your server to protect against cross-site request forgery (CSRF) attacks
          schema:
            type: string
      responses:
        '302':
          description: Redirect with code
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRedirectUriHttpError'
  /v1/auth/line:
    get:
      operationId: startLineAuth
      summary: Login with LINE
      description: Authenticate the user using LINE login. This endpoint should be called from the user's browser. It will redirect the User Agent to the LINE IDP and redirect back to Transmit upon successful authentication. Once Transmit verifies the authentication response, the User Agent will be redirected to the redirect_uri specified in the request. This URI will now include a code parameter in the query, which will be later exchanged for a token via the /token endpoint.
      parameters:
        - name: client_id
          required: true
          in: query
          description: Client ID of the application requesting authentication, retrieved from the Transmit Admin Portal
          example: DgsdfhSDsdfhtSDFXCCXBVMKPws345yscv2345XCZV
          schema:
            maxLength: 150
            type: string
        - name: redirect_uri
          required: true
          in: query
          example: https://www.example.com/login
          description: URI to redirect to upon completion of the IDP flow. This is the server GET endpoint used to call the token endpoint, and should accept "code" as a query parameter. This URI must also be configured as an allowed redirect URI in the Transmit Admin Portal
          schema:
            type: string
        - name: create_new_user
          required: false
          in: query
          example: false
          description: Indicates if a new user should be created if no user with associated email was found. If enabled, public signups must also be configured as allowed for the application.
          schema:
            default: true
            type: boolean
        - name: resource
          required: false
          in: query
          example: false
          description: Resource URI the login is attempting to access.
          schema:
            type: string
        - name: require_mfa
          required: false
          in: query
          example: true
          description: Require multi factor authentication for this authentication request.
          schema:
            default: false
            type: boolean
        - name: claims
          required: false
          in: query
          example: '{"id_token":{"roles":null}}'
          description: Used to request additional claims in the ID token, such as roles and permissions. The structure is per the [OIDC Standard](https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter). See [OIDC APIs](https://developer.transmitsecurity.com/openapi/user/oidc/#operation/oidcAuthenticate!in=query&path=claims&t=request) for the supported claims.
          schema:
            default: ''
            type: string
        - name: state
          required: false
          in: query
          example: false
          description: An opaque string that is used to maintain state between the request and the callback. It will be added to the redirect URI as a query parameter, which should be validated by your server to protect against cross-site request forgery (CSRF) attacks
          schema:
            type: string
      responses:
        '302':
          description: Redirect with code
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRedirectUriHttpError'
  /v1/auth/links/email:
    post:
      operationId: SendEmail
      summary: Send email link
      description: Send a magic link by email to a user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSendLoginEmailInput'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSendEmailResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestHttpError'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundHttpError'
      security:
        - bearer: []
  /v1/auth/otp/email:
    post:
      operationId: sendEmailOtp
      summary: Send email OTP
      description: Send a one-time passcode (OTP) by email to the given email address.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSendOtpEmailRequestInput'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSendEmailResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestHttpError'
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundHttpError'
      security:
        - bearer: []
  /v1/auth/otp/email/validation:
    post:
      operationId: validateEmailOtp
      summary: Validate email OTP
      description: Validate a one-time passcode sent by email to a user. The endpoint will return a URI which can be used to redirect the client in order to complete authentication.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiVerifyEmailOtpInput'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectUriResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestHttpError'
      security:
        - bearer: []
  /v1/auth/otp/sms:
    post:
      operationId: sendSmsOtp
      summary: Send SMS OTP
      description: Send a one-time passcode (OTP) by SMS to the given phone number
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSendAuthSmsOtpInput'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSendSmsResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestHttpError'
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundHttpError'
      security:
        - bearer: []
  /v1/auth/otp/sms/validation:
    post:
      operationId: validateSms
      summary: Validate SMS OTP
      description: Validate a one-time passcode sent by SMS to a user. The endpoint will return a URI which can be used to redirect the client in order to complete authentication.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiValidateAuthSmsOtpInput'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectUriResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestHttpError'
      security:
        - bearer: []
  /v1/token:
    post:
      operationId: tokenExchange
      summary: Exchange code for token
      description: Retrieve ID and access tokens. This API is used to retrieve ID and access tokens using the code that was returned in the redirect URI as a query parameter (for example, when the user clicks a magic link). It may also create a new user if create_new_user was set to true in the send request and no user exists for the email address or phone number (depending on the flow).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiTokenExchangeRequestInput'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenExchangeResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestHttpError'
  /v1/auth/logout:
    post:
      operationId: logout
      summary: Logout
      description: Logout the user from a specific session. The user and session are derived from the access token used to authorize the request (which was issued based on the authentication that created the session)
      parameters: []
      responses:
        '200':
          description: Sessions deleted Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLogoutResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTokenHttpError'
      security:
        - bearer: []
components:
  schemas:
    ApiLogoutResponse:
      type: object
      properties:
        sessions_count:
          type: number
          description: Number of logged out sessions
      required:
        - sessions_count
    BadRequestException:
      type: object
      properties: {}
    InvalidTokenHttpError:
      type: object
      properties:
        message:
          type: string
          example: Invalid token
        error_code:
          type: number
          example: 401
      required:
        - message
        - error_code
    ApiTokenExchangeRequestInput:
      type: object
      properties:
        code:
          type: string
          description: Authorization code returned in the redirect URI as a query parameter upon successful authentication
          example: GZxLFKTDCnlANVTxNvaWz7AIGPpXqZYSXdAwjiWRuOH
        client_id:
          type: string
          description: Client ID of the application requesting the token
          example: DgsdfhSDsdfhtSDFXCCXBVMKPws345yscv2345XCZV
          maxLength: 50
        client_secret:
          type: string
          description: Client Secret of the application requesting the token
          example: FzxvdDMbvxnc45sdfb789XCVGEW6usazxcvbw3KPsb23
          maxLength: 50
      required:
        - code
        - client_id
        - client_secret
    ApiTokenExchangeResponse:
      type: object
      properties:
        id_token:
          type: string
        access_token:
          type: string
        refresh_token:
          type: string
        is_user_created:
          type: boolean
          description: Indicates if this is a new user or not
      required:
        - id_token
        - access_token
        - refresh_token
        - is_user_created
    BadRequestHttpError:
      type: object
      properties:
        message:
          example: Bad request
          type: array
          items:
            type: string
        error_code:
          type: number
          example: 400
      required:
        - message
        - error_code
    ApiSendLoginEmailInput:
      type: object
      properties:
        email:
          type: string
          example: name@example.com
          description: Email of the user
        redirect_uri:
          type: string
          example: https://www.example.com/verify
          description: URI that will receive the authorization code. This is the server GET endpoint used to call the token endpoint, and should accept 'code' as a query parameter. This URI must also be configured as an allowed redirect URI in the Transmit Admin Portal.
        create_new_user:
          type: boolean
          example: false
          description: Indicates whether to create a new user at the end of the authentication flow if a user is not found for the provided email. If enabled, public signups must also be configured as allowed for the application.
          default: false
        resource:
          type: string
          description: URI of the resource the request is attempting to access, which is reflected in the audience (aud claim) of the access token. This must be configured as resource for the application.
        email_content:
          description: Texts, logo and color to render email template with
          allOf:
            - $ref: '#/components/schemas/EmailContentAttributes'
        require_mfa:
          type: boolean
          example: true
          description: Require multi factor authentication for this authentication request.
          default: false
        claims:
          type: object
          example:
            id_token:
              roles: null
          description: Used to request additional claims in the ID token, such as roles and permissions. The structure is per the [OIDC Standard](https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter). See [OIDC APIs](https://developer.transmitsecurity.com/openapi/user/oidc/#operation/oidcAuthenticate!in=query&path=claims&t=request) for the supported claims.
          default: {}
        client_attributes:
          description: Login attributes
          allOf:
            - $ref: '#/components/schemas/EmailMagicLinkAttributes'
      required:
        - email
        - redirect_uri
    ApiSendEmailResponse:
      type: object
      properties:
        message:
          type: string
          example: Email sent successfully
      required:
        - message
    NotFoundHttpError:
      type: object
      properties:
        message:
          type: string
        error_code:
          type: number
          example: 404
      required:
        - message
        - error_code
    ApiSendOtpEmailRequestInput:
      type: object
      properties:
        email:
          type: string
          example: name@example.com
          description: Email of the user
        redirect_uri:
          type: string
          example: https://www.example.com/verify
          description: URI that will receive the authorization code. This is the server GET endpoint used to call the token endpoint, and should accept 'code' as a query parameter. This URI must also be configured as an allowed redirect URI in the Transmit Admin Portal.
        create_new_user:
          type: boolean
          example: false
          description: Indicates whether to create a new user at the end of the authentication flow if a user is not found for the provided email. If enabled, public signups must also be configured as allowed for the application.
          default: false
        resource:
          type: string
          description: URI of the resource the request is attempting to access, which is reflected in the audience (aud claim) of the access token. This must be configured as resource for the application.
        email_content:
          description: Texts, logo and color to render email template with
          allOf:
            - $ref: '#/components/schemas/EmailContentAttributes'
        require_mfa:
          type: boolean
          example: true
          description: Require multi factor authentication for this authentication request.
          default: false
        claims:
          type: object
          example:
            id_token:
              roles: null
          description: Used to request additional claims in the ID token, such as roles and permissions. The structure is per the [OIDC Standard](https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter). See [OIDC APIs](https://developer.transmitsecurity.com/openapi/user/oidc/#operation/oidcAuthenticate!in=query&path=claims&t=request) for the supported claims.
          default: {}
        client_attributes:
          description: Login attributes
          allOf:
            - $ref: '#/components/schemas/EmailMagicLinkAttributes'
      required:
        - email
        - redirect_uri
    ApiVerifyEmailOtpInput:
      type: object
      properties:
        email:
          type: string
          description: Email that the OTP was sent to
        passcode:
          type: string
          description: Email code to validate
      required:
        - email
        - passcode
    RedirectUriResponse:
      type: object
      properties:
        result:
          type: string
          readOnly: true
          description: URL to use to redirect the browser to your redirect URI with the code for the token exchange
      required:
        - result
    ApiSendAuthSmsOtpInput:
      type: object
      properties:
        custom_message:
          type: string
          description: Message to send, must contain {otp} and {app} placeholders to be replaced with one time password and application name. Limited to 140 characters
        sender_id:
          type: string
          description: The sender name that appears as the message sender on recipients devices. Limited to 11 characters. Limited support see https://docs.aws.amazon.com/sns/latest/dg/sns-supported-regions-countries.html
        phone_number:
          type: string
          description: Phone number to send the OTP to
        create_new_user:
          type: boolean
          description: Indicates whether to create a new user at the end of the authentication flow if a user is not found for the provided phone number. If enabled, public signups must also be configured as allowed for the application.
          default: false
        redirect_uri:
          type: string
          description: URI that will receive the authorization code once the SMS OTP is validated. This is the server GET endpoint used to call the token endpoint, and should accept 'code' as a query parameter. This URI must also be configured as an allowed redirect URI in the Transmit Admin Portal
        require_mfa:
          type: boolean
          example: true
          default: false
          description: Require multi factor authentication for this authentication request.
        claims:
          type: object
          example:
            id_token:
              roles: null
          description: Used to request additional claims in the ID token, such as roles and permissions. The structure is per the [OIDC Standard](https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter). See [OIDC APIs](https://developer.transmitsecurity.com/openapi/user/oidc/#operation/oidcAuthenticate!in=query&path=claims&t=request) for the supported claims.
          default: {}
      required:
        - phone_number
        - create_new_user
        - redirect_uri
    ApiSendSmsResponse:
      type: object
      properties:
        message:
          type: string
          readOnly: true
          example: SMS sent
      required:
        - message
    ApiValidateAuthSmsOtpInput:
      type: object
      properties:
        phone_number:
          type: string
          description: Phone number that the SMS OTP was sent to
        passcode:
          type: string
          description: SMS code to validate
      required:
        - phone_number
        - passcode
    ApiGetAuthOtpInput:
      type: object
      properties:
        phone_number:
          type: string
          description: Phone number the OTP will be sent to
        email:
          type: string
          description: Email address the OTP will be sent to
        redirect_uri:
          type: string
          description: URI that will receive the authorization code once the OTP is validated. This is the server GET endpoint used to call the token endpoint, and should accept 'code' as a query parameter. This URI must also be configured as an allowed redirect URI in the Transmit Admin Portal
        create_new_user:
          type: boolean
          description: Indicates whether to create a new user at the end of the authentication flow if a user is not found for the provided phone number or email. If enabled, public signups must also be configured as allowed for the application.
          default: false
        resource:
          type: string
          description: URI of the resource the request is attempting to access, which is reflected in the audience (aud claim) of the access token. This must be configured as resource for the application.
        require_mfa:
          type: boolean
          example: true
          default: false
          description: Require multi factor authentication for this authentication request.
        claims:
          type: object
          example:
            id_token:
              roles: null
          description: Used to request additional claims in the ID token, such as roles and permissions. The structure is per the [OIDC Standard](https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter). See [OIDC APIs](https://developer.transmitsecurity.com/openapi/user/oidc/#operation/oidcAuthenticate!in=query&path=claims&t=request) for the supported claims.
          default: {}
        approval_data:
          type: object
          example:
            transaction_id: eFII2y40uB9hQ98nXt3tc1IHkRt8GrRZiqZuRn_59wT
            sum: '200'
          description: Flat object that contains the data that your customer should approve. It can contain up to 10 keys, and only alphanumeric characters, underscores, hyphens, and periods. It will be returned as a claim in the ID token upon successful authentication.
          default: {}
      required:
        - redirect_uri
    ApiGetAuthOtpResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ApiAuthOtpResponseData'
      required:
        - result
    ApiValidateOtpWithRequestIdInput:
      type: object
      properties:
        phone_number:
          type: string
          description: Phone number the OTP was sent to
        email:
          type: string
          description: Email address the OTP was sent to
        passcode:
          type: string
          description: OTP to validate
        request_id:
          type: string
          description: Request identifier that was returned upon OTP generation
      required:
        - passcode
        - request_id
    InvalidRedirectUriHttpError:
      type: object
      properties:
        message:
          type: string
          example: Invalid redirect_uri
        error_code:
          type: number
          example: 400
      required:
        - message
        - error_code
    ApiAuthOtpResponseData:
      type: object
      properties:
        passcode:
          type: string
          description: OTP to send the user
        request_id:
          type: string
          description: Request identifier used to tie the OTP to the user's session
        approval_data:
          type: string
          description: Data to present to the user to approve for an approval signing flow
      required:
        - passcode
        - request_id
        - approval_data
    EmailContentAttributes:
      type: object
      properties:
        subject:
          type: string
          description: The subject of the email
        primaryColor:
          type: string
          example: '#6981FF'
          description: Primary color of the email, specified as a Hex color
        base64logo:
          type: string
          description: Base64 encoded image for email logo
        headerText:
          type: string
          description: The header of the email
        bodyText:
          type: string
          description: The body of the email
        linkText:
          type: string
          description: The text of the link button in the email
        infoText:
          type: string
          description: Any extra information in the email
        footerText:
          type: string
          example: If you didn't request this email, you can safely ignore it.
          description: The footer of the email
      required:
        - subject
    EmailMagicLinkAttributes:
      type: object
      properties:
        user_agent:
          type: string
          example: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36
          description: User agent to verify the magic link is clicked from
        ip_address:
          type: string
          example: 123.45.67.89
          description: IP address to verify the magic link is clicked from
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
